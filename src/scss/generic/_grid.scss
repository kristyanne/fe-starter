/* ==========================================================================
   #GRID
   ========================================================================== */

/**
 * Responsive grid which allows you to manipluate the layout based on
 * viewport size.
 *
 * Settings defined in:
 * Breakpoints: settings/_breakpoints.css
 * Grid: settings/_grid.scss
 *
 * TODO: Consider replacing this grid. It's getting old now.
 */



/**
 * Grid Mixins.
 */
@mixin grid-container {
    @include clearfix;

    box-sizing: border-box;
    margin: 0 auto;
    max-width: $grid-width;
    padding-left: $grid-gutter * 2;
    padding-right: $grid-gutter * 2;
}

@mixin grid-row {
    @include clearfix;

    box-sizing: border-box;
    margin-left: ($grid-gutter / -1);
    margin-right: ($grid-gutter / -1);
}

@mixin grid-col {
    box-sizing: border-box;
    float: left;
    min-height: 1px;
    padding-left: $grid-gutter;
    padding-right: $grid-gutter;
    position: relative;
}

@mixin grid-span($cols) {
    width: percentage($cols / $grid-columns);
}

@mixin grid-offset($cols) {
    margin-left: percentage($cols / $grid-columns);
}



/**
 * Grid Core.
 *
 * `.grid {}` is the grid container element.
 * <div class="grid"></div>
 */
.grid {
    @include grid-container;
}

// DEFAULT.
@include mq($from: tablet) {
    .grid__row {
        @include grid-row;
    }

    .grid__col {
        @include grid-col;

        .grid--reverse & {
            float: right;
        }
    }

    @for $i from 1 through $grid-columns {
        .span-#{$i} {
            @include grid-span($i);
        }

        .offset-#{$i} {
            @include grid-offset($i);
        }
    }

    @for $i from 1 through $grid-columns {
        $nth: $i + 1;

        .per-row-#{$i} {
            .grid__col:nth-child(#{$i}n + #{$nth}) {
                clear: left;
            }
        }
    }
}

// MEDIUM VIEWPORT ONLY.
@include mq($from: tablet, $until: desktop) {
    @for $i from 1 through $grid-columns {
        .medium--span-#{$i} {
            @include grid-span($i);
        }

        .medium--offset-#{$i} {
            @include grid-offset($i);
        }
    }

    @for $i from 1 through $grid-columns {
        $nth: $i + 1;

        .medium--per-row-#{$i} {
            .grid__col:nth-child(#{$i}n + #{$nth}) {
                clear: left;
            }
        }
    }
}

// LARGE VIEWPORT ONLY.
@include mq($from: desktop) {
    @for $i from 1 through $grid-columns {
        .large--span-#{$i} {
            @include grid-span($i);
        }

        .large--offset-#{$i} {
            @include grid-offset($i);
        }
    }

    @for $i from 1 through $grid-columns {
        $nth: $i + 1;

        .large--per-row-#{$i} {
            .grid__col:nth-child(#{$i}n + #{$nth}) {
                clear: left;
            }
        }
    }
}

// SMALL VIEWPORT ONLY.
@include mq($until: tablet) {
    .grid {
        padding-left: $grid-gutter-small;
        padding-right: $grid-gutter-small;
    }

    .grid--small {
        .grid__row {
            @include grid-row;

            margin-left: ($grid-gutter-small / -2);
            margin-right: ($grid-gutter-small / -2);
        }

        .grid__col {
            @include grid-col;

            padding-left: $grid-gutter-small;
            padding-right: $grid-gutter-small;
        }
    }

    @for $i from 1 through $grid-columns {
        .small--span-#{$i} {
            @include grid-span($i);
        }
    }

    @for $i from 1 through $grid-columns {
        $nth: $i + 1;

        .small--per-row-#{$i} {
            .grid__col:nth-child(#{$i}n + #{$nth}) {
                clear: left;
            }
        }
    }
}

