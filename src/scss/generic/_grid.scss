/*------------------------------------*\
    #GRID
\*------------------------------------*/
/**
 * Responsive grid which allows you to manipluate the layout
 * based on viewport size.
 */



/*------------------------------------*\
    #GRID-MIXINS
\*------------------------------------*/

@mixin grid-container {
    @include clearfix;

    box-sizing: border-box;
    max-width: grid-config(width);
    padding-left: grid-config(gutter) * 2;
    padding-right: grid-config(gutter) * 2;
    margin: 0 auto;
}

@mixin grid-row {
    @include clearfix;

    box-sizing: border-box;
    margin-left: (grid-config(gutter) / -1);
    margin-right: (grid-config(gutter) / -1);
}

@mixin grid-col {
    box-sizing: border-box;
    float: left;
    min-height: 1px;
    padding-left: (grid-config(gutter));
    padding-right: (grid-config(gutter));
    position: relative;
}

@mixin grid-span($cols) {
    width: percentage(($cols / grid-config(columns)));
}

@mixin grid-offset($cols) {
    margin-left: percentage(($cols / grid-config(columns)));
}



/*------------------------------------*\
    #GRID-CORE
\*------------------------------------*/
.grid {
    @include grid-container;
}

/**
 * Default Grid
 */
@include screen-bigger-than(breakpoint(medium)) {
    .grid__row {
        @include grid-row;
    }

    .grid__col {
        @include grid-col;

        .grid--reverse & {
            float: right;
        }
    }

    @for $i from 1 through grid-config(columns) {
        .span-#{$i} {
            @include grid-span($i);
        }

        .offset-#{$i} {
            @include grid-offset($i);
        }
    }

    @for $i from 1 through grid-config(columns) {
        $nth: $i + 1;

        .per-row-#{$i} {
            .grid__col:nth-child(#{$i}n + #{$nth}) {
                clear: left;
            }
        }
    }
}

/**
 * Medium Viewport Grid
 */
@include screen-between(breakpoint(medium), breakpoint(large)) {
    @for $i from 1 through grid-config(columns) {
        .medium--span-#{$i} {
            @include grid-span($i);
        }

        .medium--offset-#{$i} {
            @include grid-offset($i);
        }
    }

    @for $i from 1 through grid-config(columns) {
        $nth: $i + 1;

        .medium--per-row-#{$i} {
            .grid__col:nth-child(#{$i}n + #{$nth}) {
                clear: left;
            }
        }
    }
}

/**
 * Large Viewport Grid
 */
@include screen-bigger-than(breakpoint(large)) {
    @for $i from 1 through grid-config(columns) {
        .large--span-#{$i} {
            @include grid-span($i);
        }

        .large--offset-#{$i} {
            @include grid-offset($i);
        }
    }

    @for $i from 1 through grid-config(columns) {
        $nth: $i + 1;

        .large--per-row-#{$i} {
            .grid__col:nth-child(#{$i}n + #{$nth}) {
                clear: left;
            }
        }
    }
}

/**
 * Small only Grid
 */
@include screen-smaller-than(breakpoint(small, max)) {
    .grid {
        padding-left: grid-config(gutter-small);
        padding-right: grid-config(gutter-small);
    }

    .grid--small {
        .grid__row {
            @include grid-row;

            margin-left: (grid-config(gutter-small) / -2);
            margin-right: (grid-config(gutter-small) / -2);
        }

        .grid__col {
            @include grid-col;

            padding-left: grid-config(gutter-small);
            padding-right: grid-config(gutter-small);
        }
    }

    @for $i from 1 through grid-config(columns) {
        .small--span-#{$i} {
            @include grid-span($i);
        }
    }

    @for $i from 1 through grid-config(columns) {
        $nth: $i + 1;

        .small--per-row-#{$i} {
            .grid__col:nth-child(#{$i}n + #{$nth}) {
                clear: left;
            }
        }
    }
}

