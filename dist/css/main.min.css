/*------------------------------------*    #IMPORTS
\*------------------------------------*/
/**
 * Import Utility Libraries.
 *
 * Bourbon:   http://bourbon.io
 * Normalize: https://github.com/necolas/normalize.css
 * Grid:      n/a
 */
/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */ }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

/*------------------------------------*    #GRID
\*------------------------------------*/
/**
 * Responsive grid which allows you to manipluate the layout
 * based on viewport size.
 *
 * Mixins defined in `grid/_mixins.scss`
 * Configuration defined in `grid/_config.scss`
 */
/*------------------------------------*    #IMPORTS
\*------------------------------------*/
/**
 * Import grid config and mixins
 */
/*------------------------------------*    #GRID-CONFIG
\*------------------------------------*/
/**
 * 1. Max width of the grid container.
 * 2. Total number of columns we want in our grid.
 * 3. Spacing between grid elements.
 */
/**
 * Breakpoints
 */
/*------------------------------------*    #GRID-MIXINS
\*------------------------------------*/
/**
 * Mixins for the `grid` lib.
 */
/*------------------------------------*    #GRID-MEDIA-QUERIES
\*------------------------------------*/
/*------------------------------------*    #GRID-ELEMENT
\*------------------------------------*/
/**
 * Grid related mixins. Used in _grid.scss.
 */
/*------------------------------------*    #CORE
\*------------------------------------*/
/**
 * Good ol' clearfix :)
 */
.clearfix::after {
  clear: both;
  content: "";
  display: table; }

/**
 * Handy Visibility Helper Classes
 */
.visible--small,
.visible--medium,
.visible--large {
  display: none !important; }

/**
 * Grid Wrapper
 */
.grid {
  box-sizing: border-box;
  max-width: 1366px;
  padding-left: 30px;
  padding-right: 30px;
  margin: 0 auto; }
  .grid::after {
    clear: both;
    content: "";
    display: table; }

/**
 * Default Grid
 */
@media screen and (min-width: 700px) {
  .grid__row {
    box-sizing: border-box;
    margin-left: -15px;
    margin-right: -15px; }
    .grid__row::after {
      clear: both;
      content: "";
      display: table; }
  .grid__col {
    box-sizing: border-box;
    float: left;
    min-height: 1px;
    padding-left: 15px;
    padding-right: 15px;
    position: relative; }
    .grid--reverse .grid__col {
      float: right; }
  .span-1 {
    width: 8.33333%; }
  .offset-1 {
    margin-left: 8.33333%; }
  .span-2 {
    width: 16.66667%; }
  .offset-2 {
    margin-left: 16.66667%; }
  .span-3 {
    width: 25%; }
  .offset-3 {
    margin-left: 25%; }
  .span-4 {
    width: 33.33333%; }
  .offset-4 {
    margin-left: 33.33333%; }
  .span-5 {
    width: 41.66667%; }
  .offset-5 {
    margin-left: 41.66667%; }
  .span-6 {
    width: 50%; }
  .offset-6 {
    margin-left: 50%; }
  .span-7 {
    width: 58.33333%; }
  .offset-7 {
    margin-left: 58.33333%; }
  .span-8 {
    width: 66.66667%; }
  .offset-8 {
    margin-left: 66.66667%; }
  .span-9 {
    width: 75%; }
  .offset-9 {
    margin-left: 75%; }
  .span-10 {
    width: 83.33333%; }
  .offset-10 {
    margin-left: 83.33333%; }
  .span-11 {
    width: 91.66667%; }
  .offset-11 {
    margin-left: 91.66667%; }
  .span-12 {
    width: 100%; }
  .offset-12 {
    margin-left: 100%; }
  .per-row-1 .grid__col:nth-child(1n + 2) {
    clear: left; }
  .per-row-2 .grid__col:nth-child(2n + 3) {
    clear: left; }
  .per-row-3 .grid__col:nth-child(3n + 4) {
    clear: left; }
  .per-row-4 .grid__col:nth-child(4n + 5) {
    clear: left; }
  .per-row-5 .grid__col:nth-child(5n + 6) {
    clear: left; }
  .per-row-6 .grid__col:nth-child(6n + 7) {
    clear: left; }
  .per-row-7 .grid__col:nth-child(7n + 8) {
    clear: left; }
  .per-row-8 .grid__col:nth-child(8n + 9) {
    clear: left; }
  .per-row-9 .grid__col:nth-child(9n + 10) {
    clear: left; }
  .per-row-10 .grid__col:nth-child(10n + 11) {
    clear: left; }
  .per-row-11 .grid__col:nth-child(11n + 12) {
    clear: left; }
  .per-row-12 .grid__col:nth-child(12n + 13) {
    clear: left; } }

/**
 * Medium Viewport only Grid
 *
 * >= medium, < large
 */
@media screen and (min-width: 700px) and (max-width: 959px) {
  .medium--span-1 {
    width: 8.33333%; }
  .medium--offset-1 {
    margin-left: 8.33333%; }
  .medium--span-2 {
    width: 16.66667%; }
  .medium--offset-2 {
    margin-left: 16.66667%; }
  .medium--span-3 {
    width: 25%; }
  .medium--offset-3 {
    margin-left: 25%; }
  .medium--span-4 {
    width: 33.33333%; }
  .medium--offset-4 {
    margin-left: 33.33333%; }
  .medium--span-5 {
    width: 41.66667%; }
  .medium--offset-5 {
    margin-left: 41.66667%; }
  .medium--span-6 {
    width: 50%; }
  .medium--offset-6 {
    margin-left: 50%; }
  .medium--span-7 {
    width: 58.33333%; }
  .medium--offset-7 {
    margin-left: 58.33333%; }
  .medium--span-8 {
    width: 66.66667%; }
  .medium--offset-8 {
    margin-left: 66.66667%; }
  .medium--span-9 {
    width: 75%; }
  .medium--offset-9 {
    margin-left: 75%; }
  .medium--span-10 {
    width: 83.33333%; }
  .medium--offset-10 {
    margin-left: 83.33333%; }
  .medium--span-11 {
    width: 91.66667%; }
  .medium--offset-11 {
    margin-left: 91.66667%; }
  .medium--span-12 {
    width: 100%; }
  .medium--offset-12 {
    margin-left: 100%; }
  .visible--medium {
    display: block !important; }
  .medium--per-row-1 .grid__col:nth-child(1n + 2) {
    clear: left; }
  .medium--per-row-2 .grid__col:nth-child(2n + 3) {
    clear: left; }
  .medium--per-row-3 .grid__col:nth-child(3n + 4) {
    clear: left; }
  .medium--per-row-4 .grid__col:nth-child(4n + 5) {
    clear: left; }
  .medium--per-row-5 .grid__col:nth-child(5n + 6) {
    clear: left; }
  .medium--per-row-6 .grid__col:nth-child(6n + 7) {
    clear: left; }
  .medium--per-row-7 .grid__col:nth-child(7n + 8) {
    clear: left; }
  .medium--per-row-8 .grid__col:nth-child(8n + 9) {
    clear: left; }
  .medium--per-row-9 .grid__col:nth-child(9n + 10) {
    clear: left; }
  .medium--per-row-10 .grid__col:nth-child(10n + 11) {
    clear: left; }
  .medium--per-row-11 .grid__col:nth-child(11n + 12) {
    clear: left; }
  .medium--per-row-12 .grid__col:nth-child(12n + 13) {
    clear: left; } }

/**
 * Large Viewport only Grid
 *
 * >= large
 */
@media screen and (min-width: 960px) {
  .large--span-1 {
    width: 8.33333%; }
  .large--offset-1 {
    margin-left: 8.33333%; }
  .large--span-2 {
    width: 16.66667%; }
  .large--offset-2 {
    margin-left: 16.66667%; }
  .large--span-3 {
    width: 25%; }
  .large--offset-3 {
    margin-left: 25%; }
  .large--span-4 {
    width: 33.33333%; }
  .large--offset-4 {
    margin-left: 33.33333%; }
  .large--span-5 {
    width: 41.66667%; }
  .large--offset-5 {
    margin-left: 41.66667%; }
  .large--span-6 {
    width: 50%; }
  .large--offset-6 {
    margin-left: 50%; }
  .large--span-7 {
    width: 58.33333%; }
  .large--offset-7 {
    margin-left: 58.33333%; }
  .large--span-8 {
    width: 66.66667%; }
  .large--offset-8 {
    margin-left: 66.66667%; }
  .large--span-9 {
    width: 75%; }
  .large--offset-9 {
    margin-left: 75%; }
  .large--span-10 {
    width: 83.33333%; }
  .large--offset-10 {
    margin-left: 83.33333%; }
  .large--span-11 {
    width: 91.66667%; }
  .large--offset-11 {
    margin-left: 91.66667%; }
  .large--span-12 {
    width: 100%; }
  .large--offset-12 {
    margin-left: 100%; }
  .visible--large {
    display: block !important; }
  .large--per-row-1 .grid__col:nth-child(1n + 2) {
    clear: left; }
  .large--per-row-2 .grid__col:nth-child(2n + 3) {
    clear: left; }
  .large--per-row-3 .grid__col:nth-child(3n + 4) {
    clear: left; }
  .large--per-row-4 .grid__col:nth-child(4n + 5) {
    clear: left; }
  .large--per-row-5 .grid__col:nth-child(5n + 6) {
    clear: left; }
  .large--per-row-6 .grid__col:nth-child(6n + 7) {
    clear: left; }
  .large--per-row-7 .grid__col:nth-child(7n + 8) {
    clear: left; }
  .large--per-row-8 .grid__col:nth-child(8n + 9) {
    clear: left; }
  .large--per-row-9 .grid__col:nth-child(9n + 10) {
    clear: left; }
  .large--per-row-10 .grid__col:nth-child(10n + 11) {
    clear: left; }
  .large--per-row-11 .grid__col:nth-child(11n + 12) {
    clear: left; }
  .large--per-row-12 .grid__col:nth-child(12n + 13) {
    clear: left; } }

/**
 * Small only Grid
 */
@media screen and (max-width: 699px) {
  .grid {
    padding-left: 20px;
    padding-right: 20px; }
  .grid--small .grid__row {
    box-sizing: border-box;
    margin-left: -15px;
    margin-right: -15px;
    margin-left: -10px;
    margin-right: -10px; }
    .grid--small .grid__row::after {
      clear: both;
      content: "";
      display: table; }
  .grid--small .grid__col {
    box-sizing: border-box;
    float: left;
    min-height: 1px;
    padding-left: 15px;
    padding-right: 15px;
    position: relative;
    padding-left: 20px;
    padding-right: 20px; }
  .small--span-1 {
    width: 8.33333%; }
  .small--span-2 {
    width: 16.66667%; }
  .small--span-3 {
    width: 25%; }
  .small--span-4 {
    width: 33.33333%; }
  .small--span-5 {
    width: 41.66667%; }
  .small--span-6 {
    width: 50%; }
  .small--span-7 {
    width: 58.33333%; }
  .small--span-8 {
    width: 66.66667%; }
  .small--span-9 {
    width: 75%; }
  .small--span-10 {
    width: 83.33333%; }
  .small--span-11 {
    width: 91.66667%; }
  .small--span-12 {
    width: 100%; }
  .visible--small {
    display: block !important; }
  .small--per-row-1 .grid__col:nth-child(1n + 2) {
    clear: left; }
  .small--per-row-2 .grid__col:nth-child(2n + 3) {
    clear: left; }
  .small--per-row-3 .grid__col:nth-child(3n + 4) {
    clear: left; }
  .small--per-row-4 .grid__col:nth-child(4n + 5) {
    clear: left; }
  .small--per-row-5 .grid__col:nth-child(5n + 6) {
    clear: left; }
  .small--per-row-6 .grid__col:nth-child(6n + 7) {
    clear: left; }
  .small--per-row-7 .grid__col:nth-child(7n + 8) {
    clear: left; }
  .small--per-row-8 .grid__col:nth-child(8n + 9) {
    clear: left; }
  .small--per-row-9 .grid__col:nth-child(9n + 10) {
    clear: left; }
  .small--per-row-10 .grid__col:nth-child(10n + 11) {
    clear: left; }
  .small--per-row-11 .grid__col:nth-child(11n + 12) {
    clear: left; }
  .small--per-row-12 .grid__col:nth-child(12n + 13) {
    clear: left; } }

/*------------------------------------*    #PLUGIN-IMPORTS
\*------------------------------------*/
/*------------------------------------*    #UTILITY-IMPORTS
\*------------------------------------*/
/**
 * Import config and utility files.
 */
/*------------------------------------*    #CONFIG
\*------------------------------------*/
/**
 * Project SASS Configuration settings.
 */
/*------------------------------------*    #CONFIG-COLOURS
\*------------------------------------*/
/**
 * Common/brand colours that we'll be using throughout
 * the site.
 */
/*------------------------------------*    #CONFIG-TYPE
\*------------------------------------*/
/**
 * Tyography config.
 *
 * 1. Bourbon uses this in their rem() mixin.
 */
/*------------------------------------*    #CONFIG-DIMENSIONS
\*------------------------------------*/
/**
 * Config options for various components that we may
 * need to use across files.
 */
/*------------------------------------*    #MIXINS
\*------------------------------------*/
/**
 * A collection of generic/handy(!) mixins.
 */
/*------------------------------------*    #DISPLAY-MIXINS
\*------------------------------------*/
/**
 * Display related mixins.
 *
 * 1. Visually hide an element. This is an accessibile way of "hiding" an element from view
 * while keeping it focusable (http://snook.ca/archives/html_and_css/hiding-content-for-accessibility)
 *
 * 2. The boubon.io hide-text mixin only works if the element has a width and height so
 * this one is just better aint it.
 */
.visually-hidden {
  position: absolute;
  overflow: hidden;
  clip: rect(0 0 0 0);
  height: 1px;
  width: 1px;
  margin: -1px;
  padding: 0;
  border: 0; }

/*------------------------------------*    #BASE-IMPORTS
\*------------------------------------*/
/**
 * Import base/generic files.
 */
/*------------------------------------*    #BASE
\*------------------------------------*/
/**
 * Base site styles. Define html and body styles in this file.
 *
 * Please don't add any CSS for classed elements to this
 * file.
 *
 * 1. See: https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/
 */
html {
  box-sizing: border-box;
  font-family: sans-serif;
  font-size: 0.9375em;
  line-height: 1.33333; }

*,
*:before,
*:after {
  box-sizing: inherit; }

body {
  color: #000; }

img {
  max-width: 100%; }

a {
  color: #000; }

/*------------------------------------*    #COMPONENT-IMPORTS
\*------------------------------------*/

/*# sourceMappingURL=data:application/json;base64, */
